#!/usr/bin/env node

var util = require('util');
var readline = require('readline');
var argv = process.argv;
var bucket = argv[2];
var action = argv[3] || 'ls';
var args = [argv[4], argv[5], argv[6]];

function usage() {
    console.warn('Usage:');
    console.warn('  s3life <bucket>');
    console.warn('  s3life <bucket> ls');
    console.warn('  s3life <bucket> add <prefix> [glacier|expire] <days>');
    console.warn('  s3life <bucket> rm <prefix>');
    console.warn('  s3life <bucket> del');
    process.exit(1);
}

if (!bucket) return usage();
if (!action) return usage();

var AWS = require('aws-sdk');
var s3 = new AWS.S3();

s3.getBucketLifecycle({ Bucket: bucket }, function(err, data) {
    if (err) throw err;
    var rules = data.Rules.map(function(rule) {
        var toGlacier = rule.Transition && rule.Transition.StorageClass === 'GLACIER';
        var result = {
            id: rule.ID,
            prefix: rule.Prefix,
            status: rule.Status
        };
        if (toGlacier) result.glacier = rule.Transition.Days;
        else result.expire = rule.Expiration.Days;
    });
    lifecyle(rules, action, args);
});

function lifecycle(rules, action, args) {
    switch (action) {
    case 'ls':
        if (!rules.length) {
            console.log('No lifecycle rules found.');
            process.exit(0);
        }
        rules.forEach(function(rule) {
            console.log('%s %s %s %s',
                rule.status === 'Enabled' ? '✔' : '✖',
                pad(rule.prefix, 30),
                pad(rule.glacier ? rule.glacier + 'd ➞ glc' : '', 9),
                pad(rule.expire ? rule.expire + 'd ➞ del' : '', 9)
            );
        });
        break;
    case 'rm':
        if (!args[0]) return usage();

        // Remove rule.
        var filtered = rules.filter(function(rule) { return rule.prefix !== args[0]; });
        if (rules.length === filtered.length) {
            console.warn('No rules with prefix %s found.', args[0]);
            process.exit(1);
        }

        // If removing very last rule, delete policy doc.
        if (!filtered.length) return lifecycle(rules, 'del');

        s3.putBucketLifecycle(getParams(bucket, filtered), function(err) {
            if (err) throw err;
            console.log('Removed lifecycle rule.');
        });
        break;
    case 'add':
        if (!args[0]) return usage();
        if (args[1] !== 'expire' && args[1] !== 'glacier') return usage();
        var days = (parseInt(args[2], 10));
        if (days <= 0) return usage();

        // Add templated rule(s).
        // @TODO add other templating patterns.
        if (/({hex}|{dec})/.test(args[0])) {
            var matches = args[0].match(/({hex}|{dec})/g);
            var prefixes = [args[0]];
            var makeRules = function(prefixes, matches) {
                if (!matches.length) return prefixes;
                var m = matches.shift();
                var l = m === '{hex}' ? 16 : 10;
                var p = [];
                prefixes.forEach(function(prefix) {
                    for (i = 0; i < l; i++) p.push(prefix.replace(m, (i).toString(16)));
                });
                return makeRules(p, matches);
            };
            rules = rules.concat(makeRules(prefixes, matches).map(function(prefix) {
                return {
                    id: '',
                    prefix: prefix,
                    expire: args[1] === 'expire' ? days : null,
                    glacier: args[1] === 'glacier' ? days : null
                };
            }));
        // Add single rule.
        } else {
            rules.push({
                id: '',
                prefix: args[0],
                expire: args[1] === 'expire' ? days : null,
                glacier: args[1] === 'glacier' ? days : null
            });
        }

        s3.putBucketLifecycle(getParams(bucket, rules), function(err) {
            if (err) throw err;
            console.log('Added lifecycle rule.');
        });
        break;
    case 'del':
        if (!rules.length) {
            console.log('No lifecycle rules found.');
            process.exit(0);
        }
        var rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        rl.question('Remove all lifecycle rules from bucket ' + bucket + '? [y/N] ', function(resp) {
            if (resp !== 'y') process.exit(0);
            s3.deleteBucketLifecycle({ Bucket: bucket }, function(err) {
                if (err) throw err;
                console.log('Removed all lifecycle rules.');
            });
        });
        break;
    }
}

function pad(str, len, r) {
    while (str.length < len) str = r ? ' ' + str : str + ' ';
    return str;
}

function getParams(bucket, rules) {
    return {
        Bucket: bucket,
        LifecycleConfiguration: {
            Rules: rules.map(function(rule) {
                var result = {
                    Prefix: rule.prefix,
                    Status: rule.status,
                    ID: rule.id
                };
                if (rule.glacier) result.Transition = {
                    Days: rule.glacier,
                    StorageClass: 'GLACIER'
                };
                else result.Expiration = { Days: rule.expire };

                return result;
            })
        }
    };
}
